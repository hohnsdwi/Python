def matMult(x,y):
    def miniMult(x,y,i,j,n):
        val=0
	for k in range(n):
        	val=val+x[i][k]*y[k][j]
	return val
    C=[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
    C[0][0]=miniMult(x,y,0,0,4)
    C[0][1]=miniMult(x,y,0,1,4)
    C[0][2]=miniMult(x,y,0,2,4)
    C[0][3]=miniMult(x,y,0,3,4)
    C[1][0]=miniMult(x,y,1,0,4)
    C[1][1]=miniMult(x,y,1,1,4)
    C[1][2]=miniMult(x,y,1,2,4)
    C[1][3]=miniMult(x,y,1,3,4)
    C[2][0]=miniMult(x,y,2,0,4)
    C[2][1]=miniMult(x,y,2,1,4)
    C[2][2]=miniMult(x,y,2,2,4)
    C[2][3]=miniMult(x,y,2,3,4)
    C[3][0]=miniMult(x,y,3,0,4)
    C[3][1]=miniMult(x,y,3,1,4)
    C[3][2]=miniMult(x,y,3,2,4)
    C[3][3]=miniMult(x,y,3,3,4)
    return C
	
%cython
cdef int miniMult(x,y,int i,int j,int n):
    val=0
    for k in range(n):
        val=val+x[i][k]*y[k][j]
    return val
cpdef matMult2(x,y):
    C=[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
    C[0][0]=miniMult(x,y,0,0,4)
    C[0][1]=miniMult(x,y,0,1,4)
    C[0][2]=miniMult(x,y,0,2,4)
    C[0][3]=miniMult(x,y,0,3,4)
    C[1][0]=miniMult(x,y,1,0,4)
    C[1][1]=miniMult(x,y,1,1,4)
    C[1][2]=miniMult(x,y,1,2,4)
    C[1][3]=miniMult(x,y,1,3,4)
    C[2][0]=miniMult(x,y,2,0,4)
    C[2][1]=miniMult(x,y,2,1,4)
    C[2][2]=miniMult(x,y,2,2,4)
    C[2][3]=miniMult(x,y,2,3,4)
    C[3][0]=miniMult(x,y,3,0,4)
    C[3][1]=miniMult(x,y,3,1,4)
    C[3][2]=miniMult(x,y,3,2,4)
    C[3][3]=miniMult(x,y,3,3,4)
    return C
	
SageMathCloud crashed, can't get accurate speed timings.
Intuition says cython is faster. Unknown.